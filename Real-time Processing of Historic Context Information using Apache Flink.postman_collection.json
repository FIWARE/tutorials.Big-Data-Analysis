{
	"variables": [],
	"info": {
		"name": "Real-time Processing of Historic Context Information using Apache Flink",
		"_postman_id": "2f8f4606-5ad5-cd12-78dc-3eab915a8e81",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Example 1: Receiving data and performing operations",
			"description": "",
			"item": [
				{
					"name": "Orion - Subscribe to Context Changes",
					"request": {
						"url": "http://{{orion}}/v2/subscriptions/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "fiware-service",
								"value": "openiot",
								"description": ""
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify Flink of all context changes\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \".*\"\n      }\n    ]\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://{{$MY_IP}}:9001/v2/notify\"\n    }\n  },\n  \"throttling\": 5\n}"
						},
						"description": "Once a dynamic context system is up and running, we need to inform **Draco** of changes in context.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that Draco will be informed of all context data changes.\n* The notification `url` must match the configured `NIFI_WEB_HTTP_PORT` and the URL the sync is listening on (usually  `/v2/notify`)\n* The `throttling` value defines the rate that changes are sampled.\n\nAs you can see, the database used to persist context data has no impact on the details of the subscription. It is the same for each database."
					},
					"response": []
				},
				{
					"name": "Orion - Check Subscription is working",
					"request": {
						"url": "http://{{orion}}/v2/subscriptions/",
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "If a subscription has been created, you can check to see if it is firing by making a GET \nrequest to the `/v2/subscriptions` endpoint.\n\nWithin the `notification` section of the response, you can see several additional `attributes` which describe the health of the subscription\n\nIf the criteria of the subscription have been met, `timesSent` should be greater than `0`.\nA zero value would indicate that the `subject` of the subscription is incorrect or the subscription \nhas created with the wrong `fiware-service-path` or `fiware-service` header\n\nThe `lastNotification` should be a recent timestamp - if this is not the case, then the devices\nare not regularly sending data. Remember to unlock the **Smart Door** and switch on the **Smart Lamp**\n\nThe `lastSuccess` should match the `lastNotification` date - if this is not the case \nthen **Draco** is not receiving the subscription properly. Check that the host name\nand port are correct. \n\nFinally, check that the `status` of the subscription is `active` - an expired subscription\nwill not fire."
					},
					"response": []
				}
			]
		},
		{
			"name": "Example 2: Receiving data, performing operations and writing back to the Context Broker",
			"description": "",
			"item": [
				{
					"name": "Orion - Subscribe to Context Changes",
					"request": {
						"url": "http://{{orion}}/v2/subscriptions/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "fiware-service",
								"value": "openiot",
								"description": ""
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify Draco of all context changes\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \"Motion.*\"\n      }\n    ]\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://draco:5050/v2/notify\"\n    }\n  },\n  \"throttling\": 5\n}"
						},
						"description": "Once a dynamic context system is up and running, we need to inform **Draco** of changes in context.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that Draco will be informed of all context data changes.\n* The notification `url` must match the configured `NIFI_WEB_HTTP_PORT` and the URL the sync is listening on (usually  `/v2/notify`)\n* The `throttling` value defines the rate that changes are sampled.\n\nAs you can see, the database used to persist context data has no impact on the details of the subscription. It is the same for each database."
					},
					"response": []
				},
				{
					"name": "Orion - Check Subscription is working",
					"request": {
						"url": "http://{{orion}}/v2/subscriptions/",
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "If a subscription has been created, you can check to see if it is firing by making a GET \nrequest to the `/v2/subscriptions` endpoint.\n\nWithin the `notification` section of the response, you can see several additional `attributes` which describe the health of the subscription\n\nIf the criteria of the subscription have been met, `timesSent` should be greater than `0`.\nA zero value would indicate that the `subject` of the subscription is incorrect or the subscription \nhas created with the wrong `fiware-service-path` or `fiware-service` header\n\nThe `lastNotification` should be a recent timestamp - if this is not the case, then the devices\nare not regularly sending data. Remember to unlock the **Smart Door** and switch on the **Smart Lamp**\n\nThe `lastSuccess` should match the `lastNotification` date - if this is not the case \nthen **Draco** is not receiving the subscription properly. Check that the host name\nand port are correct. \n\nFinally, check that the `status` of the subscription is `active` - an expired subscription\nwill not fire."
					},
					"response": []
				},
				{
					"name": "Orion - Delete Subscription",
					"request": {
						"url": "http://{{orion}}/v2/subscriptions/{{subscriptionId}}",
						"method": "DELETE",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot",
								"description": ""
							},
							{
								"key": "fiware-servicepath",
								"value": "/",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "If a subscription has been created, you can check to see if it is firing by making a GET \nrequest to the `/v2/subscriptions` endpoint.\n\nWithin the `notification` section of the response, you can see several additional `attributes` which describe the health of the subscription\n\nIf the criteria of the subscription have been met, `timesSent` should be greater than `0`.\nA zero value would indicate that the `subject` of the subscription is incorrect or the subscription \nhas created with the wrong `fiware-service-path` or `fiware-service` header\n\nThe `lastNotification` should be a recent timestamp - if this is not the case, then the devices\nare not regularly sending data. Remember to unlock the **Smart Door** and switch on the **Smart Lamp**\n\nThe `lastSuccess` should match the `lastNotification` date - if this is not the case \nthen **Draco** is not receiving the subscription properly. Check that the host name\nand port are correct. \n\nFinally, check that the `status` of the subscription is `active` - an expired subscription\nwill not fire."
					},
					"response": []
				}
			]
		}
	]
}